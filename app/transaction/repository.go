package transaction

import (
	"context"
	"database/sql"
	"log"
)

type Repository interface {
	Save(ctx context.Context, log LogEntry)
	GetAll(ctx context.Context) []LogEntry
}

func New(sqlConn *sql.DB) Repository {
	return &repository{
		sqlConn: sqlConn,
	}
}

type repository struct {
	sqlConn *sql.DB
}

func (r repository) Save(ctx context.Context, logEntry LogEntry) {
	const createQuery = "INSERT INTO transactions('order_id', 'price', 'quantity', 'timestamp') VALUES(?, ?, ?, ?);"
	txOpts := &sql.TxOptions{
		Isolation: sql.LevelSerializable,
		ReadOnly:  false,
	}

	tx, err := r.sqlConn.BeginTx(ctx, txOpts)
	if err != nil {
		log.Fatalf("Failed to start transaction. Error=%s", err.Error())
	}

	res, err := tx.Exec(createQuery, logEntry.OrderId, logEntry.Price, logEntry.Quantity, logEntry.Timestamp)
	if err != nil {
		log.Fatalf("Failed to insert logEntry: %v. Error=%s", logEntry, err.Error())
	}

	err = tx.Commit()
	if err != nil {
		log.Fatalf("Failed to commit transaction. Error=%s", err.Error())
	}

	lastInsertId, err := res.LastInsertId()
	if err != nil {
		log.Fatalf("Failed to get autogenerated ID for logEntry: %v. Error=%s", logEntry, err.Error())
	}

	log.Printf("LogEntry with Id=%d inserted successfully", lastInsertId)
}

func (r repository) GetAll(ctx context.Context) []LogEntry {
	logEntries := make([]LogEntry, 0)
	const getQuery = "SELECT order_id, price, quantity, timestamp FROM transactions"
	txOpts := &sql.TxOptions{
		Isolation: sql.LevelSerializable,
		ReadOnly:  true,
	}

	tx, err := r.sqlConn.BeginTx(ctx, txOpts)
	if err != nil {
		log.Fatalf("Failed to start transaction. Error=%s", err.Error())
	}
	rows, err := tx.Query(getQuery)
	if err != nil {
		log.Fatalf("Failed to execute query. Error=%s", err.Error())
	}

	for rows.Next() {
		var orderId int
		var price string
		var quantity string
		var transactionTimestamp string
		err = rows.Scan(&orderId, &price, &quantity, &transactionTimestamp)
		if err != nil {
			log.Fatalf("Failed to scan rows. Error=%s", err.Error())
		}

		logEntries = append(logEntries, LogEntry{
			OrderId:   orderId,
			Price:     price,
			Quantity:  quantity,
			Timestamp: transactionTimestamp,
		})
	}

	err = rows.Close()
	if err != nil {
		log.Fatalf("Failed to close rows. Error=%s", err.Error())
	}

	err = tx.Commit()
	if err != nil {
		log.Fatalf("Failed to commit transaction. Error=%s", err.Error())
	}

	return logEntries
}
